import java.sql.*;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
    }
    private static String getJobTitles(Connection conn, int empId) throws SQLException {
        String query = """
            SELECT jt.job_title
            FROM employee_job_titles ejt
            JOIN job_titles jt ON ejt.job_title_id = jt.job_title_id
            WHERE ejt.empid = ?
            ORDER BY jt.job_title
        """;
        
        StringBuilder titles = new StringBuilder();
        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setInt(1, empId);
            ResultSet rs = pstmt.executeQuery();
            
            while (rs.next()) {
                if (titles.length() > 0) {
                    titles.append(", ");
                }
                titles.append(rs.getString("job_title"));
            }
        }
        return titles.length() > 0 ? titles.toString() : "No job titles found";
    }

    private static boolean promptYesNo(Scanner scanner, String prompt) {
        while (true) {
            System.out.print(prompt + " (y/n): ");
            String response = scanner.nextLine().trim().toLowerCase();
            if (response.equals("y") || response.equals("yes")) {
                return true;
            } else if (response.equals("n") || response.equals("no")) {
                return false;
            }
            System.out.println("Please enter 'y' or 'n'.");
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int maxAttempts = 3;
        int attempts = 0;

        while (attempts < maxAttempts) {
            System.out.print("Enter username: ");
            String username = scanner.nextLine();

            System.out.print("Enter password: ");
            String password = scanner.nextLine();

            try (Connection conn = connectToDatabase()) {
                String authResult = authenticateUser(conn, username, password);
                if (authResult != null) {
                    String[] parts = authResult.split("\\|");
                    String role = parts[0];
                    int empid = Integer.parseInt(parts[1]);
                    System.out.println("Login successful. Role: " + role);

                    if (role.equals("admin")) {
                        handleAdmin(conn, scanner);
                    } else {
                        handleEmployee(conn, scanner, empid);
                    }
                    return; // Exit after successful login
                } else {
                    attempts++;
                    int remainingAttempts = maxAttempts - attempts;
                    if (remainingAttempts > 0) {
                        System.out.println("Login failed. Please check your username and password.");
                        System.out.println("You have " + remainingAttempts + " attempt(s) remaining.");
                        if (!promptYesNo(scanner, "Would you like to try again?")) {
                            System.out.println("Goodbye!");
                            return;
                        }
                    } else {
                        System.out.println("Maximum login attempts exceeded. Please try again later.");
                        return;
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private static Connection connectToDatabase() throws SQLException, ClassNotFoundException {
        Class.forName("com.mysql.cj.jdbc.Driver");
        return DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/employeedata",
                "root",
                "Aga2025tha?!"
        );
    }

    private static String authenticateUser(Connection conn, String username, String password) throws SQLException {
        String sql = "SELECT empid FROM employee_logins WHERE username = ? AND password = ?";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, username);
            stmt.setString(2, password);
            ResultSet rs = stmt.executeQuery();
            
            if (rs.next()) {
                int empid = rs.getInt("empid");
                // For now, assume admin is username 'admin'
                String role = username.equals("admin") ? "admin" : "employee";
                return role + "|" + empid;
            }
            return null;
        }
    }
    // Search employee data
    private static void searchEmployeeData(Connection conn, Scanner scanner, boolean allowUpdate) throws SQLException {
        System.out.println("\nSearch Employee Data:");
        System.out.println("1. Search by ID");
        System.out.println("2. Search by Name");
        System.out.println("3. Search by Division");
        System.out.print("Enter choice: ");
        
        String choice = scanner.nextLine().trim();
        String query = "";
        
        switch (choice) {
            case "1":
                System.out.print("Enter Employee ID: ");
                int empId = Integer.parseInt(scanner.nextLine().trim());
                query = """
                    SELECT e.empid, e.Fname, e.Lname, e.HireDate, e.Salary, e.SSN, e.email,
                           a.street, a.city_id, a.state_id, a.zip, a.gender, a.race, a.DOB, a.phone_number,
                           d.ID as division_id, d.Name as division_name, d.city as division_city,
                           d.addressLine1 as division_addr1, d.state as division_state,
                           d.country as division_country, d.postalCode as division_postal,
                           jt.job_title_id, jt.job_title
                    FROM employees e
                    LEFT JOIN address a ON e.empid = a.empid
                    LEFT JOIN employee_division ed ON e.empid = ed.empid
                    LEFT JOIN division d ON ed.div_ID = d.ID
                    LEFT JOIN employee_job_titles ejt ON e.empid = ejt.empid
                    LEFT JOIN job_titles jt ON ejt.job_title_id = jt.job_title_id
                    WHERE e.empid = ?
                """;
                try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                    pstmt.setInt(1, empId);
                    ResultSet rs = pstmt.executeQuery();
                    if (rs.next()) {
                        displayEmployeeInfo(conn, rs);
                        if (allowUpdate) {
                            updateEmployeeData(conn, scanner, empId);
                        }
                    } else {
                        System.out.println("Employee not found.");
                    }
                }
                break;
            }
            case "2":
                System.out.print("Enter Name (First or Last): ");
                String name = scanner.nextLine().trim();
                query = """
                    SELECT e.*, a.street, a.city_id, a.state_id, a.zip
                    FROM employees e
                    LEFT JOIN address a ON e.empid = a.empid
                    WHERE e.Fname LIKE ? OR e.Lname LIKE ?
                """;
                try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                    pstmt.setString(1, "%" + name + "%");
                    pstmt.setString(2, "%" + name + "%");
                    ResultSet rs = pstmt.executeQuery();
                    while (rs.next()) {
                        displayEmployeeInfo(conn, rs);
                        if (allowUpdate) {
                            if (promptYesNo(scanner, "Update this employee?")) {
                                updateEmployeeData(conn, scanner, rs.getInt("empid"));
                            }
                        }
                    }
                }
                break;
            case "3":
                System.out.print("Enter Division Name: ");
                String divName = scanner.nextLine().trim();
                query = """
                    SELECT e.*, a.street, a.city_id, a.state_id, a.zip
                    FROM employees e
                    LEFT JOIN address a ON e.empid = a.empid
                    JOIN employee_division ed ON e.empid = ed.empid
                    JOIN division d ON ed.div_ID = d.ID
                    WHERE d.Name LIKE ?
                """;
                try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                    pstmt.setString(1, "%" + divName + "%");
                    ResultSet rs = pstmt.executeQuery();
                    while (rs.next()) {
                        displayEmployeeInfo(conn, rs);
                        if (allowUpdate) {
                            if (promptYesNo(scanner, "Update this employee?")) {
                                updateEmployeeData(conn, scanner, rs.getInt("empid"));
                            }
                        }
                    }
                }
            }
            default -> System.out.println("Invalid choice.");
        }
    }

    private static void handleEmployee(Connection conn, Scanner scanner, int empId) throws SQLException {
        System.out.println("Welcome Employee.");
        while (true) {
            System.out.println("\nEmployee Menu:");
            System.out.println("1. View My Information");
            System.out.println("2. Update My Personal Information");
            System.out.println("3. View Pay History");
            System.out.println("4. Logout");
            System.out.print("Enter choice: ");
            
            String choice = scanner.nextLine().trim();
            switch (choice) {
                case "1" -> {
                    String query = """
                        SELECT e.*, 
                               a.street, a.city_id, a.state_id, a.zip, a.gender, a.race, a.DOB, a.phone_number,
                               d.division_name, d.city as division_city, d.addr1 as division_addr1, 
                               d.state as division_state, d.country as division_country, d.postal as division_postal
                        FROM employees e
                        LEFT JOIN address a ON e.empid = a.empid
                        LEFT JOIN divisions d ON e.division_id = d.div_ID
                        WHERE e.empid = ?
                    """;
                    try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                        pstmt.setInt(1, empId);
                        ResultSet rs = pstmt.executeQuery();
                        if (rs.next()) {
                            displayEmployeeInfo(conn, rs);
                        } else {
                            System.out.println("Employee information not found.");
                        }
                    }
                }
                case "2" -> updateEmployeePersonalInfo(conn, scanner, empId);
                case "3" -> displayPayHistory(conn, empId);
                case "4":
                    System.out.println("Logging out...");
                    return;
                }
                default -> System.out.println("Invalid choice. Please try again.");
            }
        }
    }
    // Update employee data (phone, email, salary)
    private static void updateEmployeeData(Connection conn, Scanner scanner, int empId) throws SQLException {
        if (conn == null || scanner == null) {
            throw new IllegalArgumentException("Connection and Scanner cannot be null.");
        }
        System.out.println("\nUpdate Employee Data:");
        System.out.println("1. Update Name");
        System.out.println("2. Update Email");
        System.out.println("3. Update Phone Number");
        System.out.println("4. Update Address");
        System.out.println("5. Update Demographics");
        System.out.println("6. Update Employee ID");
        System.out.println("7. Cancel");
        System.out.print("Enter choice: ");
        
        String query;
        String choice = scanner.nextLine().trim();
        
        switch (choice) {
            case "1" -> {
                System.out.print("Enter new first name: ");
                String fname = scanner.nextLine().trim();
                System.out.print("Enter new last name: ");
                String lname = scanner.nextLine().trim();
                query = "UPDATE employees SET Fname = ?, Lname = ? WHERE empid = ?";
                try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                    pstmt.setString(1, fname);
                    pstmt.setString(2, lname);
                    pstmt.setInt(3, empId);
                    int rowsAffected = pstmt.executeUpdate();
                    if (rowsAffected > 0) {
                        System.out.println("Name updated successfully.");
                    }
                }
            }
            case "2" -> {
                System.out.print("Enter new email: ");
                String email = scanner.nextLine().trim();
                query = "UPDATE employees SET email = ? WHERE empid = ?";
                try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                    pstmt.setString(1, email);
                    pstmt.setInt(2, empId);
                    int rowsAffected = pstmt.executeUpdate();
                    if (rowsAffected > 0) {
                        System.out.println("Email updated successfully.");
                    }
                }
            }
            case "3" -> {
                System.out.print("Enter new phone number: ");
                String phone = scanner.nextLine().trim();
                query = "UPDATE employees SET phone_number = ? WHERE empid = ?";
                try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                    pstmt.setString(1, phone);
                    pstmt.setInt(2, empId);
                    int rowsAffected = pstmt.executeUpdate();
                    if (rowsAffected > 0) {
                        System.out.println("Phone number updated successfully.");
                    }
                }
            }
            case "4" -> {
                System.out.print("Enter new street address: ");
                String street = scanner.nextLine().trim();
                System.out.print("Enter new city ID: ");
                int cityId = Integer.parseInt(scanner.nextLine().trim());
                System.out.print("Enter new state ID: ");
                int stateId = Integer.parseInt(scanner.nextLine().trim());
                System.out.print("Enter new ZIP code: ");
                String zip = scanner.nextLine().trim();
                
                // First check if address exists
                query = "SELECT empid FROM address WHERE empid = ?";
                boolean addressExists = false;
                try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                    pstmt.setInt(1, empId);
                    ResultSet rs = pstmt.executeQuery();
                    addressExists = rs.next();
                }
                
                if (addressExists) {
                    query = "UPDATE address SET street = ?, city_id = ?, state_id = ?, zip = ? WHERE empid = ?";
                } else {
                    query = "INSERT INTO address (street, city_id, state_id, zip, empid) VALUES (?, ?, ?, ?, ?)";
                }
                
                try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                    pstmt.setString(1, street);
                    pstmt.setInt(2, cityId);
                    pstmt.setInt(3, stateId);
                    pstmt.setString(4, zip);
                    pstmt.setInt(5, empId);
                    int rowsAffected = pstmt.executeUpdate();
                    if (rowsAffected > 0) {
                        System.out.println("Address updated successfully.");
                    }
                }
            }
            case "5" -> {
                System.out.print("Enter gender (M/F/O): ");
                String gender = scanner.nextLine().trim();
                System.out.print("Enter race: ");
                String race = scanner.nextLine().trim();
                System.out.print("Enter date of birth (YYYY-MM-DD): ");
                String dob = scanner.nextLine().trim();
                
                query = "UPDATE employees SET gender = ?, race = ?, DOB = ? WHERE empid = ?";
                try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                    pstmt.setString(1, gender);
                    pstmt.setString(2, race);
                    pstmt.setString(3, dob);
                    pstmt.setInt(4, empId);
                    int rowsAffected = pstmt.executeUpdate();
                    if (rowsAffected > 0) {
                        System.out.println("Demographics updated successfully.");
                    }
                }
            }
            case "6" -> {
                System.out.print("Enter new employee ID: ");
                int newEmpId = Integer.parseInt(scanner.nextLine().trim());
                
                // Start transaction
                conn.setAutoCommit(false);
                try {
                    // Update employees table
                    query = "UPDATE employees SET empid = ? WHERE empid = ?";
                    try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                        pstmt.setInt(1, newEmpId);
                        pstmt.setInt(2, empId);
                        pstmt.executeUpdate();
                    }
                    
                    // Update address table if exists
                    query = "UPDATE address SET empid = ? WHERE empid = ?";
                    try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                        pstmt.setInt(1, newEmpId);
                        pstmt.setInt(2, empId);
                        pstmt.executeUpdate();
                    }
                    
                    conn.commit();
                    System.out.println("Employee ID updated successfully.");
                } catch (SQLException e) {
                    conn.rollback();
                    throw e;
                } finally {
                    conn.setAutoCommit(true);
                }
            }
            case "7" -> System.out.println("Update cancelled.");
            default -> System.out.println("Invalid choice.");
        }
    }

     * Displays employee information
     * @param conn Database connection
     * @param rs ResultSet containing employee data
     */
    private static void displayEmployeeInfo(Connection conn, ResultSet rs) throws SQLException {
        int empId = rs.getInt("empid");
        System.out.println("\nEmployee Information:");
        System.out.println("--------------------");
        System.out.println("ID: " + empId);
        System.out.println("Name: " + rs.getString("Fname") + " " + rs.getString("Lname"));
        System.out.println("Email: " + rs.getString("email"));
        System.out.println("Hire Date: " + rs.getDate("HireDate"));
        System.out.println("Salary: $" + rs.getDouble("Salary"));
        System.out.println("SSN: " + rs.getString("SSN"));
        
        // Address Information
        System.out.println("\nAddress Information:");
        System.out.println("-------------------");
        System.out.println("Street: " + rs.getString("street"));
        System.out.println("City ID: " + rs.getInt("city_id"));
        System.out.println("State ID: " + rs.getInt("state_id"));
        System.out.println("ZIP: " + rs.getString("zip"));
        
        // Demographics
        System.out.println("\nDemographic Information:");
        System.out.println("----------------------");
        System.out.println("Gender: " + rs.getString("gender"));
        System.out.println("Race: " + rs.getString("race"));
        System.out.println("Date of Birth: " + rs.getDate("DOB"));
        System.out.println("Phone Number: " + rs.getString("phone_number"));
        
        // Division Information
        System.out.println("\nDivision Information:");
        System.out.println("--------------------");
        System.out.println("Division ID: " + rs.getInt("division_id"));
        System.out.println("Division Name: " + rs.getString("division_name"));
        System.out.println("Division City: " + rs.getString("division_city"));
        System.out.println("Division Address: " + rs.getString("division_addr1"));
        System.out.println("Division State: " + rs.getString("division_state"));
        System.out.println("Division Country: " + rs.getString("division_country"));
        System.out.println("Division Postal Code: " + rs.getString("division_postal"));
        
        System.out.println("\nJob Titles:");
        System.out.println("-----------");
        String jobTitles = getJobTitles(conn, empId);
        if (jobTitles != null) {
            System.out.println(jobTitles);
        }
    }

    private static void handleAdmin(Connection conn, Scanner scanner) throws SQLException {
        System.out.println("Welcome Admin. You have full access.");
        while (true) {
            System.out.println("\nAdmin Menu:");
            System.out.println("1. Search Employee Data");
            System.out.println("2. Update Salary Range");
            System.out.println("3. Generate Reports");
            System.out.println("4. Add New Employee");
            System.out.println("5. Exit");
            System.out.print("Enter choice: ");
            
            String choice = scanner.nextLine().trim();
            switch (choice) {
                case "1" -> searchEmployeeData(conn, scanner, true);
                case "2" -> updateSalaryRange(conn, scanner);
                case "3" -> handleReports(conn, scanner);
                case "4" -> insertNewEmployee(conn, scanner);
                case "5" -> {
                    System.out.println("Goodbye!");
                    return;
                }
                default -> System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    private static void updateSalaryRange(Connection conn, Scanner scanner) throws SQLException {
        System.out.println("\nUpdate Salary Range:");
        System.out.print("Enter minimum salary: ");
        double minSalary = Double.parseDouble(scanner.nextLine().trim());
        
        System.out.print("Enter maximum salary: ");
        double maxSalary = Double.parseDouble(scanner.nextLine().trim());
        
        System.out.print("Enter percentage change (e.g., 5 for 5% increase, -3 for 3% decrease): ");
        double percentage = Double.parseDouble(scanner.nextLine().trim());
        
        String query = """
            SELECT COUNT(*) as affected_count
            FROM employees
            WHERE Salary BETWEEN ? AND ?
        """;
        
        int affectedCount = 0;
        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setDouble(1, minSalary);
            pstmt.setDouble(2, maxSalary);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                affectedCount = rs.getInt("affected_count");
            }
        }
        
        if (affectedCount == 0) {
            System.out.println("No employees found in the specified salary range.");
            return;
        }
        
        System.out.printf("\nThis will affect %d employee(s).%n", affectedCount);
        if (!promptYesNo(scanner, "Do you want to proceed?")) {
            System.out.println("Operation cancelled.");
            return;
        }
        
        String updateQuery = """
            UPDATE employees
            SET Salary = Salary * (1 + ?/100)
            WHERE Salary BETWEEN ? AND ?
        """;
        
        try (PreparedStatement pstmt = conn.prepareStatement(updateQuery)) {
            pstmt.setDouble(1, percentage);
            pstmt.setDouble(2, minSalary);
            pstmt.setDouble(3, maxSalary);
            
            int updatedCount = pstmt.executeUpdate();
            System.out.printf("\n✅ Successfully updated %d employee salaries by %.1f%%%n", 
                updatedCount, percentage);
        }
    }
    // Generate reports for admin users
    private static void handleReports(Connection conn, Scanner scanner) throws SQLException {
        while (true) {
            System.out.println("\nReport Menu:");
            System.out.println("1. Employee Count by Division");
            System.out.println("2. Average Salary by Job Title");
            System.out.println("3. Employees Hired This Year");
            System.out.println("4. Back to Admin Menu");
            System.out.print("Enter choice: ");
            
            String choice = scanner.nextLine().trim();
            switch (choice) {
                case "1" -> {
                    String query = """
                        SELECT d.Name as Division, COUNT(e.empid) as EmployeeCount
                        FROM employees e
                        JOIN employee_division ed ON e.empid = ed.empid
                        JOIN division d ON ed.div_ID = d.ID
                        GROUP BY d.Name
                        ORDER BY d.Name
                    """;
                    try (Statement stmt = conn.createStatement();
                         ResultSet rs = stmt.executeQuery(query)) {
                        System.out.println("\nEmployee Count by Division:");
                        System.out.println("-----------------------------");
                        System.out.printf("%-30s %s%n", "Division", "Count");
                        System.out.println("-----------------------------");
                        while (rs.next()) {
                            System.out.printf("%-30s %d%n",
                                rs.getString("Division"),
                                rs.getInt("EmployeeCount"));
                        }
                    }
                }
                case "2" -> {
                    String query = """
                        SELECT jt.job_title, 
                            COUNT(e.empid) as EmployeeCount,
                            AVG(e.Salary) as AvgSalary
                        FROM job_titles jt
                        LEFT JOIN employee_job_titles ejt ON jt.job_title_id = ejt.job_title_id
                        LEFT JOIN employees e ON ejt.empid = e.empid
                        GROUP BY jt.job_title_id, jt.job_title
                        ORDER BY jt.job_title
                    """;
                    try (Statement stmt = conn.createStatement();
                         ResultSet rs = stmt.executeQuery(query)) {
                        System.out.println("\nSalary Statistics by Job Title:");
                        System.out.println("----------------------------------------");
                        System.out.printf("%-30s %-8s %s%n", "Job Title", "Count", "Avg Salary");
                        System.out.println("----------------------------------------");
                        while (rs.next()) {
                            System.out.printf("%-30s %-8d $%,.2f%n",
                                rs.getString("job_title"),
                                rs.getInt("EmployeeCount"),
                                rs.getDouble("AvgSalary"));
                        }
                    }
                }
                case "3" -> {
                    String query = """
                        SELECT e.empid, e.Fname, e.Lname, e.HireDate,
                            d.Name as Division, jt.job_title
                        FROM employees e
                        JOIN employee_division ed ON e.empid = ed.empid
                        JOIN division d ON ed.div_ID = d.ID
                        JOIN employee_job_titles ejt ON e.empid = ejt.empid
                        JOIN job_titles jt ON ejt.job_title_id = jt.job_title_id
                        WHERE YEAR(e.HireDate) = YEAR(CURDATE())
                        ORDER BY e.HireDate DESC
                    """;
                    try (Statement stmt = conn.createStatement();
                         ResultSet rs = stmt.executeQuery(query)) {
                        System.out.println("\nEmployees Hired This Year:");
                        System.out.println("------------------------------------------------------------");
                        System.out.printf("%-5s %-20s %-12s %-20s %s%n",
                            "ID", "Name", "Hire Date", "Division", "Job Title");
                        System.out.println("------------------------------------------------------------");
                        while (rs.next()) {
                            System.out.printf("%-5d %-20s %-12s %-20s %s%n",
                                rs.getInt("empid"),
                                rs.getString("Fname") + " " + rs.getString("Lname"),
                                rs.getDate("HireDate").toString(),
                                rs.getString("Division"),
                                rs.getString("job_title"));
                        }
                    }
                }
                case "4" -> {
                    return;
                }
                default -> System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    private static void displayPayHistory(Connection conn, int empid) throws SQLException {
        String query = """
            SELECT
                p.pay_date AS payDate,
                p.earnings AS grossPay,
                (p.fed_tax + p.fed_med + p.fed_SS + p.state_tax + p.retire_401k + p.health_care) AS deductions,
                (p.earnings - (p.fed_tax + p.fed_med + p.fed_SS + p.state_tax + p.retire_401k + p.health_care)) AS netPay
            FROM payroll p
            WHERE p.empid = ?
            ORDER BY p.pay_date DESC
        """;
        
        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setInt(1, empid);
            ResultSet rs = pstmt.executeQuery();
            
            boolean found = false;
            System.out.println("\nPay History:");
            System.out.println("------------------------------------------------------------");
            System.out.printf("%-12s %-12s %-12s %-12s%n", "Date", "Gross Pay", "Deductions", "Net Pay");
            System.out.println("------------------------------------------------------------");
            
            while (rs.next()) {
                found = true;
                System.out.printf("%-12s $%-11.2f $%-11.2f $%-11.2f%n",
                    rs.getDate("payDate").toString(),
                    rs.getDouble("grossPay"),
                    rs.getDouble("deductions"),
                    rs.getDouble("netPay"));
            }
            
            if (!found) {
                System.out.println("No pay history found.");
            }
        }
    }

    private static void updateEmployeePersonalInfo(Connection conn, Scanner scanner, int empId) throws SQLException {
        while (true) {
            System.out.println("\nUpdate Employee Personal Info:");
            System.out.println("1. Name");
            System.out.println("2. Email");
            System.out.println("3. Phone Number");
            System.out.println("4. Address");
            System.out.println("5. Demographics");
            System.out.println("6. Cancel");
            System.out.print("Enter choice: ");
            
            String choice = scanner.nextLine().trim();
            
            switch (choice) {
                case "1" -> {
                    System.out.print("Enter new first name: ");
                    String fname = scanner.nextLine().trim();
                    System.out.print("Enter new last name: ");
                    String lname = scanner.nextLine().trim();
                    
                    String query = "UPDATE employees SET Fname = ?, Lname = ? WHERE empid = ?";
                    try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                        pstmt.setString(1, fname);
                        pstmt.setString(2, lname);
                        pstmt.setInt(3, empId);
                        int rowsAffected = pstmt.executeUpdate();
                        if (rowsAffected > 0) {
                            System.out.println("Name updated successfully.");
                        }
                    }
                }
                case "2" -> {
                    System.out.print("Enter new email: ");
                    String email = scanner.nextLine().trim();
                    
                    String query = "UPDATE employees SET email = ? WHERE empid = ?";
                    try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                        pstmt.setString(1, email);
                        pstmt.setInt(2, empId);
                        int rowsAffected = pstmt.executeUpdate();
                        if (rowsAffected > 0) {
                            System.out.println("Email updated successfully.");
                        }
                    }
                }
                case "3" -> {
                    System.out.print("Enter new phone number: ");
                    String phone = scanner.nextLine().trim();
                    
                    String query = "UPDATE address SET phone_number = ? WHERE empid = ?";
                    try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                        pstmt.setString(1, phone);
                        pstmt.setInt(2, empId);
                        int rowsAffected = pstmt.executeUpdate();
                        if (rowsAffected > 0) {
                            System.out.println("Phone number updated successfully.");
                        }
                    }
                }
                case "4" -> {
                    System.out.print("Enter new street address: ");
                    String street = scanner.nextLine().trim();
                    System.out.print("Enter new city ID: ");
                    int cityId = Integer.parseInt(scanner.nextLine().trim());
                    System.out.print("Enter new state ID: ");
                    int stateId = Integer.parseInt(scanner.nextLine().trim());
                    System.out.print("Enter new ZIP code: ");
                    String zip = scanner.nextLine().trim();
                    
                    String query = "UPDATE address SET street = ?, city_id = ?, state_id = ?, zip = ? WHERE empid = ?";
                    try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                        pstmt.setString(1, street);
                        pstmt.setInt(2, cityId);
                        pstmt.setInt(3, stateId);
                        pstmt.setString(4, zip);
                        pstmt.setInt(5, empId);
                        int rowsAffected = pstmt.executeUpdate();
                        if (rowsAffected > 0) {
                            System.out.println("Address updated successfully.");
                        }
                    }
                }
                case "5" -> {
                    System.out.print("Enter gender (M/F/O): ");
                    String gender = scanner.nextLine().trim();
                    System.out.print("Enter race: ");
                    String race = scanner.nextLine().trim();
                    System.out.print("Enter date of birth (YYYY-MM-DD): ");
                    String dob = scanner.nextLine().trim();
                    
                    String query = "UPDATE address SET gender = ?, race = ?, DOB = ? WHERE empid = ?";
                    try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                        pstmt.setString(1, gender);
                        pstmt.setString(2, race);
                        pstmt.setString(3, dob);
                        pstmt.setInt(4, empId);
                        int rowsAffected = pstmt.executeUpdate();
                        if (rowsAffected > 0) {
                            System.out.println("Demographics updated successfully.");
                        }
                    }
                }
                case "6" -> {
                    System.out.println("Update cancelled.");
                    return;
                }
                default -> System.out.println("Invalid choice.");
            }
        }
    }
        while (true) {
            System.out.println("\nUpdate Employee Personal Info:");
            System.out.println("1. Name");
            System.out.println("2. Email");
            System.out.println("3. Phone Number");
            System.out.println("4. Address");
            System.out.println("5. Demographics");
            System.out.println("6. Cancel");
            System.out.print("Enter choice: ");
            
            String choice = scanner.nextLine().trim();
            String query;
            int rowsAffected;
            
            switch (choice) {
                case "1" -> {
                    System.out.print("Enter new first name: ");
                    String fname = scanner.nextLine().trim();
                    System.out.print("Enter new last name: ");
                    String lname = scanner.nextLine().trim();
                    query = "UPDATE employees SET Fname = ?, Lname = ? WHERE empid = ?";
                    try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                        pstmt.setString(1, fname);
                        pstmt.setString(2, lname);
                        pstmt.setInt(3, empId);
                        rowsAffected = pstmt.executeUpdate();
                        if (rowsAffected > 0) {
                            System.out.println("Name updated successfully.");
                        }
                    }
                }
                case "2" -> {
                    System.out.print("Enter new email: ");
                    String newEmail = scanner.nextLine().trim();
                    query = "UPDATE employees SET email = ? WHERE empid = ?";
                    try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                        pstmt.setString(1, newEmail);
                        pstmt.setInt(2, empId);
                        rowsAffected = pstmt.executeUpdate();
                        if (rowsAffected > 0) {
                            System.out.println("Email updated successfully.");
                        }
                    }
                }
                case "3" -> {
                    System.out.print("Enter new phone number: ");
                    String phone = scanner.nextLine().trim();
                    query = "UPDATE address SET phone_number = ? WHERE empid = ?";
                    try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                        pstmt.setString(1, phone);
                        pstmt.setInt(2, empId);
                        rowsAffected = pstmt.executeUpdate();
                        if (rowsAffected > 0) {
                            System.out.println("Phone number updated successfully.");
                        }
                    }
                }
                case "4" -> {
                    System.out.print("Enter new street address: ");
                    String street = scanner.nextLine().trim();
                    System.out.print("Enter new city ID: ");
                    int cityId = Integer.parseInt(scanner.nextLine().trim());
                    System.out.print("Enter new state ID: ");
                    int stateId = Integer.parseInt(scanner.nextLine().trim());
                    System.out.print("Enter new ZIP code: ");
                    String zip = scanner.nextLine().trim();
                    
                    query = "UPDATE address SET street = ?, city_id = ?, state_id = ?, zip = ? WHERE empid = ?";
                    try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                        pstmt.setString(1, street);
                        pstmt.setInt(2, cityId);
                        pstmt.setInt(3, stateId);
                        pstmt.setString(4, zip);
                        pstmt.setInt(5, empId);
                        rowsAffected = pstmt.executeUpdate();
                        if (rowsAffected > 0) {
                            System.out.println("Address updated successfully.");
                        }
                    }
                }
                case "5" -> {
                    System.out.print("Enter gender (M/F/O): ");
                    String gender = scanner.nextLine().trim();
                    System.out.print("Enter race: ");
                    String race = scanner.nextLine().trim();
                    System.out.print("Enter date of birth (YYYY-MM-DD): ");
                    String dob = scanner.nextLine().trim();
                    
                    query = "UPDATE address SET gender = ?, race = ?, DOB = ? WHERE empid = ?";
                    try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                        pstmt.setString(1, gender);
                        pstmt.setString(2, race);
                        pstmt.setString(3, dob);
                        pstmt.setInt(4, empId);
                        rowsAffected = pstmt.executeUpdate();
                        if (rowsAffected > 0) {
                            System.out.println("Demographics updated successfully.");
                        }
                    }
                }
                case "6" -> {
                    System.out.println("Update cancelled.");
                    return;
                }
                default -> System.out.println("Invalid choice.");
            }
        }
    }
        while (true) {
            System.out.println("\nUpdate Employee Personal Info:");
            System.out.println("1. Name");
            System.out.println("2. Email");
            System.out.println("3. Phone Number");
            System.out.println("4. Address");
            System.out.println("5. Demographics");
            System.out.println("6. Cancel");
            System.out.print("Enter choice: ");
            
            String choice = scanner.nextLine().trim();
            String query;
            int rowsAffected;
            
            switch (choice) {
                case "1" -> {
                    System.out.print("Enter new first name: ");
                    String fname = scanner.nextLine().trim();
                    System.out.print("Enter new last name: ");
                    String lname = scanner.nextLine().trim();
                    query = "UPDATE employees SET Fname = ?, Lname = ? WHERE empid = ?";
                    try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                        pstmt.setString(1, fname);
                        pstmt.setString(2, lname);
                        pstmt.setInt(3, empId);
                        rowsAffected = pstmt.executeUpdate();
                        if (rowsAffected > 0) {
                            System.out.println("Name updated successfully.");
                        }
                    }
                }
                case "2" -> {
                    System.out.print("Enter new email: ");
                    String newEmail = scanner.nextLine().trim();
                    query = "UPDATE employees SET email = ? WHERE empid = ?";
                    try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                        pstmt.setString(1, newEmail);
                        pstmt.setInt(2, empId);
                        rowsAffected = pstmt.executeUpdate();
                        if (rowsAffected > 0) {
                            System.out.println("Email updated successfully.");
                        }
                    }
                }
                case "3" -> {
                    System.out.print("Enter new phone number: ");
                    String phone = scanner.nextLine().trim();
                    query = "UPDATE address SET phone_number = ? WHERE empid = ?";
                    try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                        pstmt.setString(1, phone);
                        pstmt.setInt(2, empId);
                        rowsAffected = pstmt.executeUpdate();
                        if (rowsAffected > 0) {
                            System.out.println("Phone number updated successfully.");
                        }
                    }
                }
                case "4" -> {
                    System.out.print("Enter new street address: ");
                    String street = scanner.nextLine().trim();
                    System.out.print("Enter new city ID: ");
                    int cityId = Integer.parseInt(scanner.nextLine().trim());
                    System.out.print("Enter new state ID: ");
                    int stateId = Integer.parseInt(scanner.nextLine().trim());
                    System.out.print("Enter new ZIP code: ");
                    String zip = scanner.nextLine().trim();
                    
                    query = "UPDATE address SET street = ?, city_id = ?, state_id = ?, zip = ? WHERE empid = ?";
                    try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                        pstmt.setString(1, street);
                        pstmt.setInt(2, cityId);
                        pstmt.setInt(3, stateId);
                        pstmt.setString(4, zip);
                        pstmt.setInt(5, empId);
                        rowsAffected = pstmt.executeUpdate();
                        if (rowsAffected > 0) {
                            System.out.println("Address updated successfully.");
                        }
                    }
                }
                case "5" -> {
                    System.out.print("Enter gender (M/F/O): ");
                    String gender = scanner.nextLine().trim();
                    System.out.print("Enter race: ");
                    String race = scanner.nextLine().trim();
                    System.out.print("Enter date of birth (YYYY-MM-DD): ");
                    String dob = scanner.nextLine().trim();
                    
                    query = "UPDATE address SET gender = ?, race = ?, DOB = ? WHERE empid = ?";
                    try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                        pstmt.setString(1, gender);
                        pstmt.setString(2, race);
                        pstmt.setString(3, dob);
                        pstmt.setInt(4, empId);
                        rowsAffected = pstmt.executeUpdate();
                        if (rowsAffected > 0) {
                            System.out.println("Demographics updated successfully.");
                        }
                    }
                }
                case "6" -> {
                    System.out.println("Update cancelled.");
                    return;
                }
                default -> System.out.println("Invalid choice.");
            }
        }

        }
            System.out.println("3. Phone Number");
            System.out.println("4. Address");
            System.out.println("5. Demographics");
            System.out.println("6. Cancel");
            System.out.print("Enter choice: ");
            
            String choice = scanner.nextLine().trim();
            String query;
            int rowsAffected;
            
            switch (choice) {
            case "1" -> {
                System.out.print("Enter new first name: ");
                String fname = scanner.nextLine().trim();
                System.out.print("Enter new last name: ");
                String lname = scanner.nextLine().trim();
    private static int getNextAvailableempid(Connection conn) throws SQLException {
        String query = "SELECT MAX(empid) as max_id FROM employees";
        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {
            if (rs.next()) {
                return rs.getInt("max_id") + 1;
            }
            return 1; 
        }
    }

    private static void insertNewEmployee(Connection conn, Scanner scanner) {
        while (true) {
            try {
                System.out.println("\n--- Insert New Employee ---");
    
                // ───── EMPLOYEE ID ─────
                System.out.print("Do you have an employee ID? (y/n): ");
                String hasId = scanner.nextLine().trim().toLowerCase();
    
                int empid;
                if (hasId.equals("y")) {
                    while (true) {
                        System.out.print("Enter employee ID or 'exit' to cancel: ");
                        String empidStr = scanner.nextLine().trim();
                        if (empidStr.equalsIgnoreCase("exit")) return;
                        try {
                            empid = Integer.parseInt(empidStr);
                            String checkQuery = "SELECT empid FROM employees WHERE empid = ?";
                            try (PreparedStatement pstmt = conn.prepareStatement(checkQuery)) {
                                pstmt.setInt(1, empid);
                                ResultSet rs = pstmt.executeQuery();
                                if (rs.next()) {
                                    System.out.println("Error: Employee ID already exists.");
                                    continue;
                                }
                                break;
                            }
                        } catch (NumberFormatException e) {
                            System.out.println("Error: Please enter a valid integer ID.");
                        }
                    }
                } else if (hasId.equals("n")) {
                    empid = getNextAvailableempid(conn);
                    System.out.println("Using next available ID: " + empid);
                } else {
                    System.out.println("Invalid input. Please enter 'y' or 'n'.");
                    continue;
                }
    
                // ───── INPUT VALIDATION ─────
                System.out.print("Enter employee first name: ");
                String Fname = scanner.nextLine().trim();
    
                System.out.print("Enter employee last name: ");
                String Lname = scanner.nextLine().trim();
    
                System.out.print("Enter email (e.g., john.doe@example.com): ");
                String email = scanner.nextLine().trim();
    
                System.out.print("Enter hire date (YYYY-MM-DD): ");
                java.sql.Date HireDate = java.sql.Date.valueOf(scanner.nextLine().trim());
    
                System.out.print("Enter salary (e.g., 50000): ");
                double Salary = Double.parseDouble(scanner.nextLine().trim().replace("$", "").replace(",", ""));
    
                System.out.print("Enter SSN (XXX-XX-XXXX): ");
                String SSN = scanner.nextLine().trim();
    
                System.out.print("Enter gender (M/F/Other): ");
                String gender = scanner.nextLine().trim();
    
                System.out.print("Enter race (White/Black/Asian/Hispanic/Other): ");
                String race = scanner.nextLine().trim();
    
                System.out.print("Enter date of birth (YYYY-MM-DD): ");
                java.sql.Date DOB = java.sql.Date.valueOf(scanner.nextLine().trim());
    
                System.out.print("Enter phone number (XXX-XXX-XXXX): ");
                String phone = scanner.nextLine().trim();
    
                System.out.print("Enter street address: ");
                String street = scanner.nextLine().trim();
    
                System.out.print("Enter ZIP code: ");
                String zip = scanner.nextLine().trim();
    
                // ───── CITY ─────
                int cityId;
                String cityQuery = "SELECT city_id, name_of_city FROM city ORDER BY name_of_city";
                try (PreparedStatement stmt = conn.prepareStatement(cityQuery);
                     ResultSet rs = stmt.executeQuery()) {
                    System.out.println("\nAvailable Cities:");
                    while (rs.next()) {
                        System.out.println(rs.getInt("city_id") + ". " + rs.getString("name_of_city"));
                    }
                }
                System.out.print("Enter city ID: ");
                cityId = Integer.parseInt(scanner.nextLine().trim());
    
                // ───── STATE ─────
                int stateId;
                String stateQuery = "SELECT state_id, name_of_state FROM state ORDER BY name_of_state";
                try (PreparedStatement stmt = conn.prepareStatement(stateQuery);
                     ResultSet rs = stmt.executeQuery()) {
                    System.out.println("\nAvailable States:");
                    while (rs.next()) {
                        System.out.println(rs.getInt("state_id") + ". " + rs.getString("name_of_state"));
                    }
                }
                System.out.print("Enter state ID: ");
                stateId = Integer.parseInt(scanner.nextLine().trim());
    
                // ───── DIVISION ─────
                int divisionId;
                String divQuery = "SELECT ID, Name FROM division ORDER BY ID";
                try (PreparedStatement stmt = conn.prepareStatement(divQuery);
                     ResultSet rs = stmt.executeQuery()) {
                    System.out.println("\nAvailable Divisions:");
                    while (rs.next()) {
                        System.out.println(rs.getInt("ID") + ". " + rs.getString("Name"));
                    }
                }
                System.out.print("Enter division ID: ");
                divisionId = Integer.parseInt(scanner.nextLine().trim());
    
                // ───── JOB TITLE ─────
                int jobTitleId;
                String jobQuery = "SELECT job_title_id, job_title FROM job_titles ORDER BY job_title";
                try (PreparedStatement stmt = conn.prepareStatement(jobQuery);
                     ResultSet rs = stmt.executeQuery()) {
                    System.out.println("\nAvailable Job Titles:");
                    while (rs.next()) {
                        System.out.println(rs.getInt("job_title_id") + ". " + rs.getString("job_title"));
                    }
                }
                System.out.print("Enter job title ID: ");
                jobTitleId = Integer.parseInt(scanner.nextLine().trim());
    
                // ───── TRANSACTION ─────
                conn.setAutoCommit(false);
    
                // Insert employee

                
                String insertEmployee = "INSERT INTO employees (Fname, Lname, email, HireDate, Salary, SSN, division_id) VALUES (?, ?, ?, ?, ?, ?, ?)";
                int empid;
                try (PreparedStatement pstmt = conn.prepareStatement(insertEmployee, Statement.RETURN_GENERATED_KEYS)) {
                    pstmt.setString(1, Fname);
                    pstmt.setString(2, Lname);
                    pstmt.setString(3, email);
                    pstmt.setDate(4, HireDate);
                    pstmt.setDouble(5, Salary);
                    pstmt.setString(6, SSN);
                    pstmt.setInt(7, divisionId);
                    pstmt.executeUpdate();
                    
                    try (ResultSet rs = pstmt.getGeneratedKeys()) {
                        if (rs.next()) {
                            empid = rs.getInt(1);
                        } else {
                            throw new SQLException("Failed to get generated employee ID.");
                        }
                    }
                }
    
                // Insert address
                String insertAddress = "INSERT INTO address (empid, street, city_id, state_id, zip) VALUES (?, ?, ?, ?, ?)";
                try (PreparedStatement pstmt = conn.prepareStatement(insertAddress)) {
                    pstmt.setInt(1, empid);
                    pstmt.setString(2, street);
                    pstmt.setInt(3, cityId);
                    pstmt.setInt(4, stateId);
                    pstmt.setString(5, zip);
                    pstmt.executeUpdate();
                }
    
                // Insert job title
                String insertJob = "INSERT INTO employee_job_titles (empid, job_title_id) VALUES (?, ?)";
                try (PreparedStatement pstmt = conn.prepareStatement(insertJob)) {
                    pstmt.setInt(1, empid);
                    pstmt.setInt(2, jobTitleId);
                    pstmt.executeUpdate();
                }
    
                // Insert division
                String insertDivision = "INSERT INTO employee_division (empid, div_ID) VALUES (?, ?)";
                try (PreparedStatement pstmt = conn.prepareStatement(insertDivision)) {
                    pstmt.setInt(1, empid);
                    pstmt.setInt(2, divisionId);
                    pstmt.executeUpdate();
                }
                conn.commit();
                System.out.println("\n✅ Employee successfully added!");
                if (promptYesNo(scanner, "Would you like to view the added employee info?")) {
                    String viewQuery = "SELECT * FROM employees WHERE empid = ?";
                    try (PreparedStatement pstmt = conn.prepareStatement(viewQuery)) {
                        pstmt.setInt(1, empid);
                        ResultSet rs = pstmt.executeQuery();
                        if (rs.next()) {
                            displayEmployeeInfo(conn, rs);
                        }
                    }
                }
                return;
            } catch (SQLException e) {
                System.out.println("Error: " + e.getMessage());
                try {
                    conn.rollback();
                } catch (SQLException rollbackEx) {
                    System.out.println("Rollback failed: " + rollbackEx.getMessage());
                }
                if (!promptYesNo(scanner, "Would you like to retry?")) return;
            }
        }
    }
}